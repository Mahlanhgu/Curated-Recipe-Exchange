import java.util.HashMap;
import java.util.Map;
import java.util.HashMap;
import java.util.Map;

public class User {
    private int id;
    private String username;
    private String email;
    private String password;

    // Constructor, getters, and setters

    public boolean login(String username, String password) {
        // Logic for user login
        return true; // Placeholder return value
    }

    public void logout() {
        // Logic for user logout
    }

    public boolean register(String username, String email, String password) {
        // Logic for user registration
        return true; // Placeholder return value
    }

    public boolean resetPassword(String email) {
        // Logic for resetting user password
        return true; // Placeholder return value
    }

    public void createRecipe(String title, String description, String[] ingredients, String instructions) {
        // Logic to create a new recipe
    }

    public void editRecipe(Recipe recipe, String newTitle, String newDescription, String[] newIngredients, String newInstructions) {
        // Logic to edit an existing recipe
    }

    public void deleteRecipe(Recipe recipe) {
        // Logic to delete a recipe
    }

public class Recipe {
    private int id;
    private String title;
    private String description;
    private String[] ingredients;
    private String instructions;
    private User author;

    // Constructor, getters, and setters

    public void rate(int stars) {
        // Logic for rating a recipe
    }

    public void review(String comment) {
        // Logic for reviewing a recipe
    }

    public void addToCollection(RecipeCollection collection) {
        // Logic to add the recipe to a collection
    }

    public void removeFromCollection(RecipeCollection collection) {
        // Logic to remove the recipe from a collection
    }

public class RecipeCollection {
    private int id;
    private String name;
    private List<Recipe> recipes;

    public RecipeCollection() {
        recipes = new ArrayList<>();
    }

    // Constructor, getters, and setters

    public void addRecipe(Recipe recipe) {
        recipes.add(recipe);
    }

    public void removeRecipe(Recipe recipe) {
        recipes.remove(recipe);
    }

    public List<Recipe> getRecipes() {
        // Logic to get all recipes in the collection
        return recipes;
    }

    public Recipe getRecipeById(int id) {
        // Logic to get a recipe by its ID
        return recipes.stream()
                      .filter(recipe -> recipe.getId() == id)
                      .findFirst()
                      .orElse(null);
    }

public class Database {
    private Map<Integer, User> users;
    private Map<Integer, Recipe> recipes;
    private Map<Integer, RecipeCollection> recipeCollections;

    public Database() {
        users = new HashMap<>();
        recipes = new HashMap<>();
        recipeCollections = new HashMap<>();
    }

    // Constructor, getters, and setters

    public void saveUser(User user) {
        users.put(user.getId(), user);
    }

    public void saveRecipe(Recipe recipe) {
        recipes.put(recipe.getId(), recipe);
    }

    public void saveRecipeCollection(RecipeCollection collection) {
        recipeCollections.put(collection.getId(), collection);
    }

    public User getUser(int id) {
        return users.get(id);
    }

    public Recipe getRecipe(int id) {
        return recipes.get(id);
    }

    public RecipeCollection getRecipeCollection(int id) {
        return recipeCollections.get(id);
    }

    public List<Recipe> getAllRecipes() {
        // Logic to get all recipes from the database
        return new ArrayList<>(recipes.values());
    }
}
}
}
}
